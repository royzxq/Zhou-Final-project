/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
NewProjectAudioProcessorEditor::NewProjectAudioProcessorEditor (NewProjectAudioProcessor* ownerFilter)
: AudioProcessorEditor (ownerFilter),title("","PSYeCHO"),FBLabel("","FeedBack Gain:"),intensityLabel("","Intensity:"),RrateLabel("","Repeat Rate:"),ReverbLabel("","Reverb Volumn:"),ModeLabel("","Mode Selector:"),Bypass(false),Old(false),ModeBox("ModeBox")
{
    // This is where our plugin's editor size is set.
    addAndMakeVisible(FBGainSlider);
    FBGainSlider.setSliderStyle(Slider::Rotary);
    FBGainSlider.addListener(this);
    FBGainSlider.setRange(0.0, 2.0,0.1);
    
    addAndMakeVisible(intensitySlider);
    intensitySlider.setSliderStyle(Slider::Rotary);
    intensitySlider.addListener(this);
    intensitySlider.setRange(0.07, 2,0.01);
    
    addAndMakeVisible(RrateSlider);
    RrateSlider.setSliderStyle(Slider::Rotary);
    RrateSlider.addListener(this);
    RrateSlider.setRange(0.0, 2.0,0.1);
    
    addAndMakeVisible(ReverbSlider);
    ReverbSlider.setSliderStyle(Slider::Rotary);
    ReverbSlider.addListener(this);
    ReverbSlider.setRange(0.0, 2.0,0.1);
    
    addAndMakeVisible(ModeSlider);
    ModeSlider.setSliderStyle(Slider::Rotary);
    ModeSlider.addListener(this);
    ModeSlider.setRange(0.0,1.0,1.0);
    
    addAndMakeVisible(ModeBox);
    ModeBox.setEditableText(true);
    ModeBox.setJustificationType(Justification::centred);
    ModeBox.setTextWhenNothingSelected(TRANS("Single Tap Delay"));
    ModeBox.setTextWhenNoChoicesAvailable(TRANS("(NO CHOICE)"));
    ModeBox.addListener(this);
    
    addAndMakeVisible(BypassButton);
    BypassButton.setButtonText("ByPass");
    BypassButton.addListener(this);
    
    addAndMakeVisible(OldButton);
    OldButton.setButtonText("Old");
    OldButton.addListener(this);
    
    addAndMakeVisible(title);
    title.setColour(Label::textColourId, Colours::blue);
    title.setFont(Font(17.0f));
    
    addAndMakeVisible(resizer = new ResizableCornerComponent(this,&resizeLimits));
    
    resizeLimits.setSizeLimits(200, 200, 1000, 400);
    
    setSize(500, 350);
    
    startTimer(50);
    
    FBLabel.attachToComponent(&FBGainSlider, true);
    intensityLabel.attachToComponent(&intensitySlider, true);
    ModeLabel.attachToComponent(&ModeSlider, true);
    ReverbLabel.attachToComponent(&ReverbSlider, true);
    RrateLabel.attachToComponent(&RrateSlider, true);
    
    
    
    //BypassButton.setClickingTogglesState(true);
    //OldButton.setClickingTogglesState(true);
    
}

NewProjectAudioProcessorEditor::~NewProjectAudioProcessorEditor()
{
}

void NewProjectAudioProcessorEditor::buttonClicked(Button * button)
{
    if (button == &BypassButton) {
        Bypass = !Bypass;
        getProcessor()->setParameterNotifyingHost(NewProjectAudioProcessor::bypassParam, Bypass);
    }
    if (button == &OldButton) {
        Old = !Old;
        getProcessor()->setParameterNotifyingHost(NewProjectAudioProcessor::oldParam, Old);
    }

}

void NewProjectAudioProcessorEditor::comboBoxChanged (ComboBox* comboBoxThatHasChanged)
{
    if (comboBoxThatHasChanged == &ModeBox) {
        
    }
}
void NewProjectAudioProcessorEditor::timerCallback()
{
    NewProjectAudioProcessor * ourProcessor = getProcessor();
    
    FBGainSlider.setValue(ourProcessor->fb_gain);
    RrateSlider.setValue(ourProcessor->repeat_rate);
    ModeSlider.setValue(ourProcessor->mode);
    ReverbSlider.setValue(ourProcessor->reverb_volumn);
    intensitySlider.setValue(ourProcessor->delay_sec);
    
    
}

void NewProjectAudioProcessorEditor::sliderValueChanged(juce::Slider *slider)
{
    if (slider == &FBGainSlider) {
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::FBParam, (float)FBGainSlider.getValue());
    }
    else if (slider == &intensitySlider){
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::DelayParam, (float)intensitySlider.getValue());
    }
    else if(slider == &RrateSlider)
    {
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::RepeatParam, (float)RrateSlider.getValue());
    }
    else if(slider == & ReverbSlider)
    {
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::ReverbParam, (float)ReverbSlider.getValue());
    }
    else if(slider == & ModeSlider){
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::ModeParam, (int)ModeSlider.getValue());
    }
}
//==============================================================================
void NewProjectAudioProcessorEditor::paint (Graphics& g)
{
    if (Bypass) {
         BypassButton.setColour(TextButton::buttonColourId, Colours::red);
    }
    else{
        BypassButton.setColour(TextButton::buttonColourId, Colours::green);
    }
    if(Old){
        OldButton.setColour(TextButton::buttonColourId, Colours::black);
    }
    else{
        OldButton.setColour(TextButton::buttonColourId, Colours::cyan);
    }

    g.fillAll (Colour(0xffa8bf98));
    g.setColour(Colours::orange);
    g.fillRect(10,50,480,290);

}

void NewProjectAudioProcessorEditor::resized()
{
    
    title.setBounds(10, 10, 100, 30);
    intensitySlider.setBounds(150, 50, 80, 40);
    RrateSlider.setBounds(350, 50, 80, 40);
    ReverbSlider.setBounds(150, 150, 80, 40);
    FBGainSlider.setBounds(350, 150, 80, 40);
    BypassButton.setBounds(100, 230, 60, 40);
    OldButton.setBounds(100, 280, 40, 40);
    ModeSlider.setBounds(300, 200, 100, 100);
    resizer -> setBounds(getWidth() - 16 , getHeight() - 16 , 16, 16);
    
}

