/*
 ==============================================================================
 
 This file was auto-generated by the Introjucer!
 
 It contains the basic startup code for a Juce application.
 
 ==============================================================================
 */

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
NewProjectAudioProcessorEditor::NewProjectAudioProcessorEditor (NewProjectAudioProcessor* ownerFilter)
: AudioProcessorEditor (ownerFilter),title("","Space Echo"),FBLabel("","FeedBack Gain:"),intensityLabel("","Intensity:"),RrateLabel("","Repeat Rate:"),ReverbLabel("","Reverb Volumn:"),ModeLabel("","Mode Selector:"),ModBox("Mode Selector Box"), Bypass(false),Old(false),PreIntense(0),PreFBGain(0),PreRate(0),PreReverb(0)
{
    // This is where our plugin's editor size is set.
    addAndMakeVisible(FBGainSlider);
    FBGainSlider.setSliderStyle(Slider::Rotary);
    FBGainSlider.addListener(this);
    FBGainSlider.setRange(0.0, 2.0,0.1);
    
    addAndMakeVisible(intensitySlider);
    intensitySlider.setSliderStyle(Slider::Rotary);
    intensitySlider.addListener(this);
    intensitySlider.setRange(0.07, 2,0.01);
    
    addAndMakeVisible(RrateSlider);
    RrateSlider.setSliderStyle(Slider::Rotary);
    RrateSlider.addListener(this);
    RrateSlider.setRange(0.07, 0.16,0.01);
    
    addAndMakeVisible(ReverbSlider);
    ReverbSlider.setSliderStyle(Slider::Rotary);
    ReverbSlider.addListener(this);
    ReverbSlider.setRange(0.0, 2.0,0.1);
    
    addAndMakeVisible(ModeSlider);
    ModeSlider.setSliderStyle(Slider::Rotary);
    ModeSlider.addListener(this);
    ModeSlider.setRange(0.0,1.0,1.0);
    
    
    addAndMakeVisible(BypassButton);
    BypassButton.setButtonText("ByPass");
    BypassButton.addListener(this);
    
    addAndMakeVisible(OldButton);
    OldButton.setButtonText("Old");
    OldButton.addListener(this);
    
    addAndMakeVisible(ModBox);
    ModBox.setEditableText(false);
    ModBox.setJustificationType(Justification::centred);
    ModBox.setTextWhenNothingSelected("Please select the mode");
    ModBox.addItem("Single Tap", 1);
    ModBox.addItem("MultiTap", 2);
    ModBox.addItem("Reverb", 3);
    ModBox.addListener(this);
    
    addAndMakeVisible(title);
    title.setColour(Label::textColourId, Colours::blue);
    title.setFont(Font(17.0f));
    
    addAndMakeVisible(resizer = new ResizableCornerComponent(this,&resizeLimits));
    
    resizeLimits.setSizeLimits(200, 200, 1000, 400);
    
    setSize(600, 400);
    
    startTimer(50);
    
    FBLabel.attachToComponent(&FBGainSlider, true);
    intensityLabel.attachToComponent(&intensitySlider, true);
    ModeLabel.attachToComponent(&ModeSlider, true);
    ReverbLabel.attachToComponent(&ReverbSlider, true);
    RrateLabel.attachToComponent(&RrateSlider, true);
    
    
    
    //BypassButton.setClickingTogglesState(true);
    //OldButton.setClickingTogglesState(true);
    
}

NewProjectAudioProcessorEditor::~NewProjectAudioProcessorEditor()
{
}

void NewProjectAudioProcessorEditor::buttonClicked(Button * button)
{
    if (button == &BypassButton) {
        Bypass = !Bypass;
        getProcessor()->setParameterNotifyingHost(NewProjectAudioProcessor::bypassParam, Bypass);
    }
    if (button == &OldButton) {
        Old = !Old;
        getProcessor()->setParameterNotifyingHost(NewProjectAudioProcessor::oldParam, Old);
    }
    
}

void NewProjectAudioProcessorEditor::comboBoxChanged(juce::ComboBox *comboBoxThatHasChanged)
{
    if (comboBoxThatHasChanged == &ModBox) {
        if (ModBox.getSelectedId() == 1) {
            getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::ModeParam, 0);
        }
        else if(ModBox.getSelectedId() == 2)
        {
            getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::ModeParam, 1);
        }
    }
}

void NewProjectAudioProcessorEditor::timerCallback()
{
    NewProjectAudioProcessor * ourProcessor = getProcessor();
    
    FBGainSlider.setValue(ourProcessor->fb_gain);
    RrateSlider.setValue(ourProcessor->repeat_rate);
    ModeSlider.setValue(ourProcessor->mode);
    ReverbSlider.setValue(ourProcessor->reverb_volumn);
    intensitySlider.setValue(ourProcessor->delay_sec);
    
    
}

void NewProjectAudioProcessorEditor::sliderValueChanged(juce::Slider *slider)
{
    float newValue = slider -> getValue();
    if (slider == &FBGainSlider) {
        while (abs(PreFBGain-newValue)>0.01) {
            PreFBGain = 0.9 * PreFBGain + 0.1 * newValue;
            getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::FBParam, PreFBGain);
        }
        PreFBGain = newValue;
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::FBParam, PreFBGain);
        
    }
    else if (slider == &intensitySlider){
        while (abs(PreIntense-newValue)>0.01) {
            PreIntense = 0.9 * PreIntense + 0.1 * newValue;
            getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::IntensityParam, PreIntense);
        }
        PreIntense = newValue;
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::IntensityParam, PreIntense);
    }
    else if(slider == &RrateSlider)
    {
        while (abs(PreRate-newValue)>0.01) {
            PreRate = 0.9 * PreRate + 0.1 * newValue;
            getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::RepeatParam, PreRate);
        }
        PreRate = newValue;
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::RepeatParam, PreRate);
    }
    else if(slider == & ReverbSlider)
    {
        while (abs(PreReverb-newValue)>0.01) {
            PreReverb = 0.9 * PreReverb + 0.1 * newValue;
            getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::ReverbParam, PreReverb);
        }
        PreReverb = newValue;
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::ReverbParam, PreReverb);
    }
    else if(slider == & ModeSlider){
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::ModeParam, (int)ModeSlider.getValue());
    }
}
//==============================================================================
void NewProjectAudioProcessorEditor::paint (Graphics& g)
{
    
    
    g.fillAll (Colours::grey);
    g.setColour(Colours::yellowgreen);
    g.fillRect(30, 40, 540, 350);
    
    if (Bypass) {
        BypassButton.setColour(TextButton::ColourIds::buttonColourId, Colours::red);
    }
    else {
        BypassButton.setColour(TextButton::ColourIds::buttonColourId, Colours::green);
    }
    if (Old) {
        OldButton.setColour(TextButton::ColourIds::buttonColourId, Colours::black);
    }
    else OldButton.setColour(TextButton::ColourIds::buttonColourId, Colours::yellowgreen);
    
}

void NewProjectAudioProcessorEditor::resized()
{
    title.setBounds(20, 10, 100, 30);
    intensitySlider.setBounds(150, 100, 100, 30);
    RrateSlider.setBounds(400, 100, 100, 30);
    ReverbSlider.setBounds(150, 200, 100, 30);
    FBGainSlider.setBounds(400, 200, 100, 30);
    BypassButton.setBounds(100, 270, 60, 40);
    OldButton.setBounds(100, 320, 40, 40);
    //ModeSlider.setBounds(500, 300, 100, 100);
    ModBox.setBounds(300, 300, 150, 30);
    resizer -> setBounds(getWidth() - 16 , getHeight() - 16 , 16, 16);
    
}

