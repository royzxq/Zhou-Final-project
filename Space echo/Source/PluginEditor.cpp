/*
 ==============================================================================
 
 This file was auto-generated by the Introjucer!
 
 It contains the basic startup code for a Juce application.
 
 ==============================================================================
 */

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
NewProjectAudioProcessorEditor::NewProjectAudioProcessorEditor (NewProjectAudioProcessor* ownerFilter)
: AudioProcessorEditor (ownerFilter),title("","PSYeCHO"),FBLabel("","FeedBack Gain:"),intensityLabel("","Intensity:"),RrateLabel("","Repeat Rate:"),ReverbLabel("","Reverb Volumn:"),ModeLabel("","Select Sound Effect:"),SaturationLabel("","Saturation Level"), HighShelvingLabel("","HighShelving cutoff"),LowShelvingLabel("","Gain"), ModBox("Mode Selector Box"),DelayGroup("Delay parameter"),ReverbGroup("Reverb parameter"),FilterGroup("Filter cuttoffs"), HighShelving(false),LowShelving(false),Old(false),PreIntense(0.0),PreFBGain(0.0),PreRate(0.0),PreReverb(0.0)
{
    // This is where our plugin's editor size is set.
    addAndMakeVisible(FBGainSlider);
    FBGainSlider.setSliderStyle(Slider::Rotary);
    FBGainSlider.addListener(this);
    FBGainSlider.setRange(0.0, 2.0, 0.1);
    
    addAndMakeVisible(intensitySlider);
    intensitySlider.setSliderStyle(Slider::Rotary);
    intensitySlider.addListener(this);
    intensitySlider.setRange(0.0, 1.0, 0.1);
    
    addAndMakeVisible(RrateSlider);
    RrateSlider.setSliderStyle(Slider::Rotary);
    RrateSlider.addListener(this);
    RrateSlider.setRange(0.07, 0.16,0.01);
    
    addAndMakeVisible(ReverbSlider);
    ReverbSlider.setSliderStyle(Slider::Rotary);
    ReverbSlider.addListener(this);
    ReverbSlider.setRange(0.0, 1.0, 0.1);
    
    addAndMakeVisible(ModeSlider);
    ModeSlider.setSliderStyle(Slider::Rotary);
    ModeSlider.addListener(this);
    ModeSlider.setRange(0.0,1.0,1.0);
    
    addAndMakeVisible(InputRangeSlider);
    InputRangeSlider.setSliderStyle(Slider::IncDecButtons);
    InputRangeSlider.addListener(this);
    InputRangeSlider.setRange(0.0, 1.0, 0.1);
    InputRangeSlider.setValue(1.0);
    
    addAndMakeVisible(HighShelvingSlider);
    HighShelvingSlider.setSliderStyle(Slider::Rotary);
    HighShelvingSlider.addListener(this);
    HighShelvingSlider.setRange(0.0, 1.0, 0.1);
    HighShelvingSlider.setValue(0.0);

    addAndMakeVisible(ShelvingGainSlider);
    ShelvingGainSlider.setSliderStyle(Slider::Rotary);
    ShelvingGainSlider.addListener(this);
    ShelvingGainSlider.setRange(-15.0, 15.0, 0.1);
    ShelvingGainSlider.setValue(6.0);
    
    addAndMakeVisible(NormalButton);
    NormalButton.setButtonText("No filter");
    NormalButton.addListener(this);
    
    addAndMakeVisible(HighShelvingButton);
    HighShelvingButton.setButtonText("HighShelving");
    HighShelvingButton.addListener(this);
    
    addAndMakeVisible(LowShelvingButton);
    LowShelvingButton.setButtonText("LowShelving");
    LowShelvingButton.addListener(this);
    
    addAndMakeVisible(OldButton);
    OldButton.setButtonText("Hiss");
    OldButton.addListener(this);
    
    addAndMakeVisible(ModBox);
    ModBox.setEditableText(false);
    ModBox.setJustificationType(Justification::centred);
    ModBox.setTextWhenNothingSelected("Single Tap Delay");
    ModBox.addItem("Single Tap Delay", 1);
    ModBox.addItem("MultiTap Delay", 2);
    ModBox.addItem("Inverse Delay", 3);
    ModBox.addItem("Reverb", 4);
    ModBox.addItem("Single Delay with Reverb", 5);
    ModBox.addListener(this);
    
    addAndMakeVisible(DelayGroup);
    DelayGroup.setTextLabelPosition(Justification::left);
    DelayGroup.setText("Delay Parameters");
    
    addAndMakeVisible(ReverbGroup);
    ReverbGroup.setTextLabelPosition(Justification::left);
    ReverbGroup.setText("Reverb Parameters");
    
    addAndMakeVisible(FilterGroup);
    FilterGroup.setTextLabelPosition(Justification::left);
    FilterGroup.setText("Filter Paramters");
    
    addAndMakeVisible(title);
    title.setColour(Label::textColourId, Colours::blue);
    title.setFont(Font(24.0f));
    
    addAndMakeVisible(FBLabel);
    addAndMakeVisible(intensityLabel);
    addAndMakeVisible(RrateLabel);
    addAndMakeVisible(ReverbLabel);
    addAndMakeVisible(ModeLabel);
    addAndMakeVisible(SaturationLabel);
    addAndMakeVisible(HighShelvingLabel);
    addAndMakeVisible(LowShelvingLabel);
    
    addAndMakeVisible(resizer = new ResizableCornerComponent(this,&resizeLimits));
    
    resizeLimits.setSizeLimits(200, 200, 1000, 400);
    
    setSize(700, 500);
    
    startTimer(50);
    
//    FBLabel.attachToComponent(&FBGainSlider, true);
//    intensityLabel.attachToComponent(&intensitySlider, true);
//    ModeLabel.attachToComponent(&ModeSlider, true);
//    ReverbLabel.attachToComponent(&ReverbSlider, true);
//    RrateLabel.attachToComponent(&RrateSlider, true);
    
    SaturationLabel.attachToComponent(&InputRangeSlider, true);
    
    //ByShelvingButton.setClickingTogglesState(true);
    //OldButton.setClickingTogglesState(true);
    //HighShelvingButton.setClickingTogglesState(true);
    //LowShelvingButton.setClickingTogglesState(true);
}

NewProjectAudioProcessorEditor::~NewProjectAudioProcessorEditor()
{
}

void NewProjectAudioProcessorEditor::buttonClicked(Button * button)
{

    if (button == &OldButton) {
        Old = !Old;
        getProcessor()->setParameterNotifyingHost(NewProjectAudioProcessor::oldParam, Old);
    }
    if (button == &HighShelvingButton) {
        HighShelving = !HighShelving;
        if (HighShelving) {
            LowShelving = false;
        }
        getProcessor()->setParameterNotifyingHost(NewProjectAudioProcessor::HighShelvingParam, HighShelving);
    }
    if (button == &LowShelvingButton) {
        LowShelving = !LowShelving;
        if (LowShelving) {
            HighShelving = false;
        }
        getProcessor()->setParameterNotifyingHost(NewProjectAudioProcessor::LowShelvingParam, LowShelving);
    }
    if (button == &NormalButton) {
        LowShelving = false;
        HighShelving = false;
        getProcessor()->setParameterNotifyingHost(NewProjectAudioProcessor::HighShelvingParam, HighShelving);
        getProcessor()->setParameterNotifyingHost(NewProjectAudioProcessor::LowShelvingParam, LowShelving);
    }
    
}

void NewProjectAudioProcessorEditor::comboBoxChanged(juce::ComboBox *comboBoxThatHasChanged)
{
    if (comboBoxThatHasChanged == &ModBox) {

        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::ModeParam, ModBox.getSelectedId()-1);
    }
}

void NewProjectAudioProcessorEditor::timerCallback()
{
    NewProjectAudioProcessor * ourProcessor = getProcessor();
    
    FBGainSlider.setValue(ourProcessor->fb_gain);
    RrateSlider.setValue(ourProcessor->delay_sec);
    ReverbSlider.setValue(ourProcessor->reverb_volumn);
    intensitySlider.setValue(ourProcessor->intensity);
    HighShelvingSlider.setValue(ourProcessor->CutoffHigh);
    ShelvingGainSlider.setValue(ourProcessor->ShelvingGain);
    
    
}
void NewProjectAudioProcessorEditor::startTimer(int intervalInMilliseconds)
{
    float newFBvalue = FBGainSlider.getValue();
    if (fabs(newFBvalue-PreFBGain)>0.01) {
        PreFBGain = 0.9 * PreFBGain + 0.1 * newFBvalue;
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::FBParam, PreFBGain);
    }
    else {
        PreFBGain = newFBvalue;
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::FBParam, PreFBGain);
    }
    
    float newIntvalue = intensitySlider.getValue();
    if (fabs(newIntvalue-PreIntense)>0.01) {
        PreIntense = 0.9 * PreIntense + 0.1 * newIntvalue;
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::IntensityParam, PreIntense);
    }
    else {
        PreIntense = newIntvalue;
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::IntensityParam, PreIntense);
    }
    
    float newRatevalue = RrateSlider.getValue();
    if (fabs(newRatevalue-PreRate)>0.01) {
        PreRate = 0.9 * PreRate + 0.1 * newRatevalue;
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::RepeatParam, PreRate);
    }
    else {
        PreRate = newRatevalue;
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::RepeatParam, PreRate);
    }
    
    float newReverbvalue = ReverbSlider.getValue();
    if (fabs(newReverbvalue-PreReverb)>0.01) {
        PreReverb = 0.9 * PreReverb + 0.1 * newReverbvalue;
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::ReverbParam, PreReverb);
    }
    else {
        PreReverb = newReverbvalue ;
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::ReverbParam, PreReverb);
    }
    
}
void NewProjectAudioProcessorEditor::sliderValueChanged(juce::Slider *slider)
{
    //startTimer(5);
    
    if (slider == &FBGainSlider) {
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::FBParam, slider->getValue());
    }
    else if (slider == &intensitySlider){
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::IntensityParam,  slider->getValue());
    }
    else if(slider == &RrateSlider)
    {
        
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::RepeatParam,  slider->getValue());
    }
    else if(slider == & ReverbSlider)
    {
       
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::ReverbParam,  slider->getValue());
    }
    if (slider == & InputRangeSlider)
    {
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::RangeParam, InputRangeSlider.getValue());
    }
    else if(slider == & HighShelvingSlider)
    {
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::CutoffHighParam, HighShelvingSlider.getValue());
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::CutoffLowParam, HighShelvingSlider.getValue());
    }
    else if(slider == & ShelvingGainSlider)
    {
        getProcessor() -> setParameterNotifyingHost(NewProjectAudioProcessor::ShelvingGainParam, ShelvingGainSlider.getValue());
    }
}
//==============================================================================
void NewProjectAudioProcessorEditor::paint (Graphics& g)
{

    g.fillAll (Colours::grey);
    g.setColour(Colours::yellowgreen);
    g.fillRect(20, 50, 660, 430);
    
    if (Old) {
        OldButton.setColour(0, Colours::blue);
    }
    else OldButton.setColour(0, Colours::white);
    if (HighShelving) {
        HighShelvingButton.setColour(0, Colours::blue);
    }
    else
       HighShelvingButton.setColour(0, Colours::white);
    if (LowShelving) {
        LowShelvingButton.setColour(0,Colours::blue);
        
    }
    else LowShelvingButton.setColour(0,Colours::white);
}

void NewProjectAudioProcessorEditor::resized()
{
    title.setBounds(15, 7, 150, 40);
    ModeLabel.setBounds(40, 60, 140, 40);
    ModBox.setBounds(185, 60, 150, 40);
    
    DelayGroup.setBounds(280, 120, 230, 200);
    ReverbGroup.setBounds(45, 120, 230, 200);
    FilterGroup.setBounds(515, 120, 150, 200);
    
    intensityLabel.setBounds(100-5, 135, 120, 30);
    intensitySlider.setBounds(100-5, 165, 120, 40);
    ReverbLabel.setBounds(100-5, 215, 120, 30);
    ReverbSlider.setBounds(100-5, 245, 120, 40);
    
    RrateLabel.setBounds(350-10, 135, 120, 30);
    RrateSlider.setBounds(350-10, 165, 120, 40);
    FBLabel.setBounds(350-10, 215, 120, 30);
    FBGainSlider.setBounds(350-10, 245, 120, 40);
    
    HighShelvingLabel.setBounds(530, 135, 120, 30);
    HighShelvingSlider.setBounds(530, 165, 120, 40);
    LowShelvingLabel.setBounds(530, 215, 120, 30);
    ShelvingGainSlider.setBounds(530, 245, 120, 40);
    
    HighShelvingButton.setBounds(530, 340, 80, 30);
    LowShelvingButton.setBounds(530, 390, 80, 30);
    NormalButton.setBounds(530, 440, 80, 30);
    OldButton.setBounds(350, 350, 60, 30);
    InputRangeSlider.setBounds(170,350,100,30);
    //ModeSlider.setBounds(500, 300, 100, 100);
    resizer -> setBounds(getWidth() - 16 , getHeight() - 16 , 16, 16);
    
}

