/*
 ==============================================================================
 
 This file was auto-generated by the Introjucer!
 
 It contains the basic startup code for a Juce application.
 
 ==============================================================================
 */

#ifndef PLUGINEDITOR_H_INCLUDED
#define PLUGINEDITOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "PluginProcessor.h"

//==============================================================================
/**
 */
class NewProjectAudioProcessorEditor  : public AudioProcessorEditor,
public SliderListener,
public Timer,
public ButtonListener,
public ComboBoxListener
{
public:
    NewProjectAudioProcessorEditor (NewProjectAudioProcessor* ownerFilter);
    ~NewProjectAudioProcessorEditor();
    
    
    //==============================================================================
    // This is just a standard Juce paint method...
    void paint (Graphics& g);
    void timerCallback() override;
    void startTimer(int intervalInMilliseconds);
    void resized() override;
    void buttonClicked (Button *) override;
    void sliderValueChanged(Slider * slide) override;
    void comboBoxChanged(ComboBox * comboBoxThatHasChanged) override;
    
private:
    Label title,FBLabel,intensityLabel,RrateLabel,ReverbLabel,ModeLabel;
    Slider FBGainSlider,intensitySlider,RrateSlider,ReverbSlider,ModeSlider;
    ComboBox ModBox;
    TextButton BypassButton,OldButton;
    ScopedPointer<ResizableCornerComponent> resizer;
    ComponentBoundsConstrainer resizeLimits;
    NewProjectAudioProcessor *getProcessor() const
    {
        return static_cast<NewProjectAudioProcessor*>(getAudioProcessor());
    }
    bool Bypass;
    bool Old;
    
    float PreIntense;
    float PreFBGain;
    float PreRate;
    float PreReverb;
    
    
};


#endif  // PLUGINEDITOR_H_INCLUDED
